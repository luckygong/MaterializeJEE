<?xml version="1.0" encoding="UTF-8"?>  
<b:beans xmlns="http://www.springframework.org/schema/security"  
    xmlns:b="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">  
  
 <!-- 配置不需要安全管理的界面 -->  
 <http pattern="/ws/**" security="none"/>  
 <http pattern="/rs/**" security="none"/>  
 <http pattern="/assets/**" security="none"/>  
 <http pattern="/index.jsp" security="none" />  
 <http pattern="/login.jsp" security="none" />  
 <http pattern="/pages/error/**" security="none" />  
  
 <http auto-config="false" use-expressions='true' entry-point-ref="myAuthenticationEntryPoint">  
    <access-denied-handler ref="accessDeniedHandler"/>
    <session-management invalid-session-url="/sessionTimeout"/>
    
    <!-- 使用自己自定义的登陆认证过滤器 -->
    <!-- 认证和授权 --><!-- 重写登陆认证的过滤器，使我们可以拿到任何参数  -->  
    <custom-filter ref="logoutFilter" position="LOGOUT_FILTER" />
    <custom-filter ref="concurrencyFilter" position="CONCURRENT_SESSION_FILTER" />
    <custom-filter ref="myAuthenticationFilter" position="FORM_LOGIN_FILTER"  />  
    <custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />  
	<csrf disabled="true" />
</http>  
    
	<!-- 未登录的切入点 --> 
	<b:bean id="myAuthenticationEntryPoint" class="com.materialize.jee.platform.authorization.security.MyAuthenticationEntryPoint">  
        <b:constructor-arg value="/login.jsp"/> 
    </b:bean>  
          
	<!-- 登录验证器：用户有没有登录的资格 --><!-- 这个就是重写的认证过滤器 -->  
    <b:bean id="myAuthenticationFilter" class="com.materialize.jee.platform.authorization.security.MyAuthenticationFilter">
        <b:property name="filterProcessesUrl" value="/doLogin" />  
        <b:property name="authenticationManager" ref="authenticationManager" />  
        <b:property name="authenticationSuccessHandler" ref="myAuthenticationSuccessHandler"/>  
        <b:property name="authenticationFailureHandler" ref="myAuthenticationFailureHandler"/>  
    </b:bean>  
    
    <!-- 登录验证成功处理者 -->
	<b:bean id="myAuthenticationSuccessHandler" class="com.materialize.jee.platform.authorization.security.MySimpleLoginSuccessHandler"  depends-on="jdbcTemplate">
		<b:property name="sessionRegistry" ref="sessionRegistry" /> 
		<b:property name="jdbcTemplate" ref="jdbcTemplate" />
		<b:property name="defaultTargetUrl" value="/main" />
	</b:bean>
	<!-- 登录验证失败处理者 -->
	<b:bean id="myAuthenticationFailureHandler" class="com.materialize.jee.platform.authorization.security.MySimpleLoginFailureHandler">  
        <b:constructor-arg name="defaultFailureUrl" value="/login.jsp" />  
    </b:bean> 
          
    <!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性，我们的所有控制将在这三个类中实现，解释详见具体配置 -->  
    <b:bean id="myFilter" class="com.materialize.jee.platform.authorization.security.MyFilterSecurityInterceptor">  
        <b:property name="authenticationManager" ref="authenticationManager" />  
        <b:property name="accessDecisionManager" ref="myAccessDecisionManager" />  
        <b:property name="securityMetadataSource" ref="securityMetadataSource" />  
    </b:bean>
      
    <!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
    <authentication-manager alias="authenticationManager">  
		<authentication-provider ref="myAuthenticationProvider" />  
		<authentication-provider ref="myPhoneAuthenticationProvider" />  
   	</authentication-manager>
   	<b:bean id="myAuthenticationProvider" class="com.materialize.jee.platform.authorization.security.MyUserAuthenticationProvider">
		<b:property name="userDetailsService" ref="myUserDetailService" />
		<b:property name="passwordEncoder" ref="md5Encoder" />
		<b:property name="saltSource" ref="saltSource" />
	</b:bean>
   	<b:bean id="myPhoneAuthenticationProvider" class="com.materialize.jee.platform.authorization.security.MyPhoneAuthenticationProvider">
		<b:property name="userDetailsService" ref="myUserDetailService" />
		<b:property name="passwordEncoder" ref="md5Encoder" />
		<b:property name="saltSource" ref="saltSource" />
	</b:bean>
    <b:bean id="md5Encoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
	<b:bean id="saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">
		<b:property name="userPropertyToUse" value="id" />
	</b:bean>
	
    <!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->  
    <b:bean id="myUserDetailService" class="com.materialize.jee.platform.authorization.security.MyUserDetailService"  depends-on="jdbcTemplate">
    	<b:property name="jdbcTemplate" ref="jdbcTemplate" /> 
    </b:bean>
    
    <!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->  
    <b:bean id="myAccessDecisionManager" class="com.materialize.jee.platform.authorization.security.MyAccessDecisionManager" />  
    
    <!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->  
    <b:bean id="securityMetadataSource" class="com.materialize.jee.platform.authorization.security.MyInvocationSecurityMetadataSource" >
        <b:property name="jdbcTemplate" ref="jdbcTemplate" />
	</b:bean>
	
	<!-- SESSION并发处理 -->  
	<b:bean id="concurrencyFilter" class="com.materialize.jee.platform.authorization.security.MyConcurrentSessionFilter">  
	    <b:constructor-arg name="sessionRegistry" ref="sessionRegistry" />  
	    <b:constructor-arg name="expiredUrl" value="/sessionTimeout" />  
	    <b:constructor-arg name="excludeUrl" value="(.*)/(doLogin)(.*)" />  
	</b:bean>  
	<b:bean id="sessionRegistry" class="com.materialize.jee.platform.authorization.security.MySessionRegistryImpl" />  
    
    <!-- 退出过滤器 -->
	<b:bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<b:constructor-arg value="/login.jsp" />
		<b:constructor-arg>
			<b:array>
				<b:ref bean="myLogoutHandler" />
			</b:array>
		</b:constructor-arg>
		<b:property name="filterProcessesUrl" value="/logout" />
	</b:bean>
	<!-- 退出成功处理者 -->
	<b:bean id="myLogoutHandler" class="com.materialize.jee.platform.authorization.security.MyLogoutHandler" />
	
	<b:bean id="accessDeniedHandler" class="com.materialize.jee.platform.authorization.security.MyAccessDeniedHandler">  
		<b:property name="accessDeniedUrl" value="/accessDenied" />  
	</b:bean>  
 </b:beans>  